// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Whiteboard {
  id          String   @id @default(cuid())
  name        String
  status      WhiteboardStatus @default(DRAFT)
  content     Json?    // TLDraw snapshot data
  userId      String   // Clerk user ID
  shareId     String?  @unique
  isPubliclyShared Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments         Comment[]

  @@map("whiteboards")
}

model Comment {
  id           String     @id @default(cuid())
  whiteboardId String
  userId       String     // Clerk user ID
  userName     String     // User's display name
  userEmail    String?    // User's email (optional)
  userAvatar   String?    // User's avatar URL (optional)
  text         String     // Comment text
  x            Float      // X position on canvas
  y            Float      // Y position on canvas
  resolved     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relationship
  whiteboard   Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  
  @@map("comments")
  @@index([whiteboardId])
  @@index([whiteboardId, resolved])
}

enum WhiteboardStatus {
  DRAFT
  PUBLISHED
}